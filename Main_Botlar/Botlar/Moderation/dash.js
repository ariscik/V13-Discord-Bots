const { Client, Intents, Permissions } = require('discord.js');
const { Aris } = require("./Aris")
const config = require("../../Settings/config.json")
const { ariscik, channelBackup, roleBackup, Custom, Penalties } = require("../../Helpers/Schemas")
const { rolKur } = require("../../Helpers/BackupFunction")
const express = require('express');
const app = express();

const bParser = require("body-parser");
const cParser = require("cookie-parser");
const ejs = require("ejs");
const path = require("path");

const passport = require('passport');
const session = require('express-session');
const { Strategy } = require('passport-discord');
const moment = require('moment');
moment.locale('tr');

//Burada Sikiş var çünkü ana bacı kaycaz

app.engine('ejs', ejs.__express);
app.set('view engine', 'ejs');
app.use(bParser.json());
app.use(bParser.urlencoded({ extended: true }));
app.use(cParser());
app.set('views', path.join(__dirname, 'Panel/views'));
app.use(express.static(path.join(__dirname, 'Panel/public')));
app.use(session({ secret: 'aris-lesnar', resave: false, saveUninitialized: true }));
app.use(passport.initialize());
app.use(passport.session());
// bitti amınoğlu

//Şimdi Şifreleyelim
passport.serializeUser((user, done) => { done(null, user) });
passport.deserializeUser((obj, done) => { done(null, obj) });
const izinler = ["identify", "guilds"];
passport.use(new Strategy({
    clientID: config.clientID,
    clientSecret: config.clientSecret,
    callbackURL: config.callbackURL,
    scope: izinler
}, (accessToken, refreshToken, profile, done) => {
    process.nextTick(() => done(null, profile));
}));

app.get("/login", passport.authenticate("discord", { scope: izinler, }));
app.get('/callback', passport.authenticate("discord", { failureRedirect: '/error' }), async (req, res) => { const aris = await ariscik.findOne({ guildID: config.guildID }); res.redirect('/panel'); client.channels.cache.get(aris.guardLog).send({ content: `(\`${req.user.username} - ${req.user.id}\`) kişisi [WEB PANEL] sistemine giriş yaptı!`}) });
app.get('/logout', (req, res) => { req.logOut(); return res.redirect('/'); });
// bitti

//Buraya Sayfaları sok
app.get('/', async (req, res) => { res.redirect('/login') })
app.get('/error', async (req, res) => { res.render('hata', { user: req.user, bot: client }); })
app.get('/panelerror', async (req, res) => { res.render('panelhata', {user: req.user, bot: client }); });
app.get('/panel', async (req, res) => { if (!req.user || !client.guilds.cache.get(config.guildID).members.cache.get(req.user.id)) return res.redirect('/error'); if (!config.Founders.includes(req.user.id)) return res.redirect('/panelerror'); res.render('panel', { user: req.user, bot: client }) })

app.get('/guard', async (req, res) => { if (!req.user || !client.guilds.cache.get(config.guildID).members.cache.get(req.user.id)) return res.redirect('/error'); if (!config.Founders.includes(req.user.id)) return res.redirect('/panelerror'); const data = await ariscik.findOne({ guildID: config.guildID }); const changed = []; for (const member of data.WhiteListMembers) { const user = await client.users.fetch(member); changed.push({ id: member, name: user.tag, }); } data.WhiteListMembers = changed; const yetkiPermleri = ["8", "268435456", "16", "536870912", "4", "2", "134217728", "1073741824", "536870912"]; const caudit = await client.guilds.cache.get(config.guildID).fetchAuditLogs({ type: 'CHANNEL_DELETE', limit: 30 }).then(a => a.entries); const raudit = await client.guilds.cache.get(config.guildID).fetchAuditLogs({ type: 'ROLE_DELETE', limit: 30 }).then(a => a.entries); res.render('pages/guard', { user: req.user, bot: client, arislesnar: data, yetkiPermleri: yetkiPermleri, caudit: caudit, raudit: raudit }); })
app.get('/moderation', async (req, res) => { if (!req.user || !client.guilds.cache.get(config.guildID).members.cache.get(req.user.id)) return res.redirect('/error'); if (!config.Founders.includes(req.user.id)) return res.redirect('/panelerror'); res.render('pages/moderation', { user: req.user, bot: client, arislesnar: await ariscik.findOne({ guildID: config.guildID }) }); })
app.get('/register', async (req, res) => { if (!req.user || !client.guilds.cache.get(config.guildID).members.cache.get(req.user.id)) return res.redirect('/error'); if (!config.Founders.includes(req.user.id)) return res.redirect('/panelerror'); res.render('pages/register', { user: req.user, bot: client, arislesnar: await ariscik.findOne({ guildID: config.guildID }) }); })
app.get('/bot', async (req, res) => { if (!req.user || !client.guilds.cache.get(config.guildID).members.cache.get(req.user.id)) return res.redirect('/error'); if (!config.Founders.includes(req.user.id)) return res.redirect('/panelerror'); res.render('pages/bot', { user: req.user, bot: client, arislesnar: await ariscik.findOne({ guildID: config.guildID }) }); })
app.get('/role', async (req, res) => { if (!req.user || !client.guilds.cache.get(config.guildID).members.cache.get(req.user.id)) return res.redirect('/error'); if (!config.Founders.includes(req.user.id)) return res.redirect('/panelerror'); res.render('pages/role', { user: req.user, bot: client, arislesnar: await ariscik.findOne({ guildID: config.guildID }) }); })
app.get('/menu', async (req, res) => { if (!req.user || !client.guilds.cache.get(config.guildID).members.cache.get(req.user.id)) return res.redirect('/error'); if (!config.Founders.includes(req.user.id)) return res.redirect('/panelerror'); res.render('pages/menu', { user: req.user, bot: client, arislesnar: await Custom.find({}) }); })
app.get('/settings', async (req, res) => { if (!req.user || !client.guilds.cache.get(config.guildID).members.cache.get(req.user.id)) return res.redirect('/error'); if (!config.Founders.includes(req.user.id)) return res.redirect('/panelerror'); res.render('pages/settings', { user: req.user, bot: client, arislesnar: await ariscik.findOne({ guildID: config.guildID }) }); })
app.get('/cezalar', async (req, res) => { if (!req.user || !client.guilds.cache.get(config.guildID).members.cache.get(req.user.id)) return res.redirect('/error'); if (!config.Founders.includes(req.user.id)) return res.redirect('/panelerror'); res.render('pages/cezalar', { user: req.user, bot: client, arislesnar: await ariscik.findOne({ guildID: config.guildID }), data: await Penalties.find({ guildID: config.guildID }) }); const data = await Penalties.find({ guildID: config.guildID }); data.filter(e => e.Aktif == true).map(a => console.log(a.userID)) })
app.get('/gorev', async (req, res) => { if (!req.user || !client.guilds.cache.get(config.guildID).members.cache.get(req.user.id)) return res.redirect('/error'); if (!config.Founders.includes(req.user.id)) return res.redirect('/panelerror'); res.render('pages/gorev', { user: req.user, bot: client, arislesnar: await ariscik.findOne({ guildID: config.guildID }), data: await Custom.find({ guildID: config.guildID }) }); })


//Butonların etkileişimi buraya
app.post('/yetkilikaydet', async (req, res) => { res.render('pages/moderation', { user: req.user, bot: client }); let obj = { jailyetkili: req.body.jailyrol, banyetkili: req.body.banyrol, muteyetkili: req.body.muteyrol, vmuteyetkili: req.body.vmuteyrol, clownyetkili: req.body.clownyrol, moveyrol: req.body.moveyrol}; if (obj.jailyetkili !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { jailHammer: obj.jailyetkili } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında jail yetkili seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.banyetkili !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { banHammer: obj.banyetkili } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında ban yetkili rolü seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.muteyetkili !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { muteHammer: obj.muteyetkili } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında mute yetkili seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.vmuteyetkili !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { vmuteHammer: obj.vmuteyetkili } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında voice mute rolü seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.clownyetkili !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { clownHammer: obj.clownyetkili } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında clown yetkili rolü seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.moveyrol !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { moveHammer: obj.moveyrol } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında move yetkili rolü seçilmediği için herhangi bir işlem yapmıyorum!") } })
app.post('/genelrolkaydet', async (req, res) => { res.render('pages/moderation', { user: req.user, bot: client }); let obj = { jailrol: req.body.jailrol, muterol: req.body.muterol, vmuterol: req.body.vmuterol, tagrol: req.body.tagrol, boosterrol: req.body.boosterrol }; if (obj.jailrol !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { jailedRole: obj.jailrol } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında jail rolü seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.muterol !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { mutedRole: obj.muterol } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında mute rolü seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.vmuterol !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { vmutedRole: obj.vmuterol } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında vmute seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.tagrol !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { tagRol: obj.tagrol } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında voice tag rolü seçilmediği için herhangi bir işlem yapmıyorum!") };  if (obj.boosterrol !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { boosterRole: obj.boosterrol } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında booster rolü seçilmediği için herhangi bir işlem yapmıyorum!") } })
app.post('/genellogkaydet', async (req, res) => { res.render('pages/moderation', { user: req.user, bot: client }); let obj = { jaillog: req.body.jaillog, mutelog: req.body.mutelog, banlog: req.body.banlog, taglog: req.body.taglog, denetimlog: req.body.denetimlog, mesajlog: req.body.messagelog, seslog: req.body.voicelog, rollog: req.body.rollog, botses: req.body.botses }; if (obj.jaillog !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { jailLog: obj.jaillog } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında jail log seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.mutelog !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { muteLog: obj.mutelog } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında mute log seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.banlog !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { banLog: obj.banlog } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında ban log seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.taglog !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { tagLog: obj.taglog } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında tag log seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.denetimlog !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { denetimLog: obj.denetimlog } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında denetim log seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.mesajlog !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { messageLog: obj.mesajlog } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında mesaj log seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.seslog !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { voiceLog: obj.seslog } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında ses log seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.rollog !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { rolLog: obj.rollog } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında rol log seçilmediği için herhangi bir işlem yapmıyorum!") };   if (obj.botses !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { botVoiceChannel: obj.botses } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında bot ses seçilmediği için herhangi bir işlem yapmıyorum!") } })
app.post('/guvenlikaydet', async (req, res) => { res.render('pages/guard', { user: req.user, bot: client }); let obj = { guvenlicikar: req.body.guvenlicikar, guvenliekle: req.body.guvenliekle }; if (obj.guvenlicikar !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $pull: { WhiteListMembers: obj.guvenlicikar } }, { upsert: true }) } else { console.log("[WEB PANEL] Site ayarlarında güvenli çıkarılacak kişi seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.guvenliekle !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $push: { WhiteListMembers: obj.guvenliekle } }, { upsert: true }) } else { console.log("[WEB PANEL] Site ayarlarında güvenli eklenecek kişi seçilmediği için herhangi bir işlem yapmıyorum!") };  })
app.post('/rolkanalkur', async (req, res) => { res.render('pages/guard', { user: req.user, bot: client }); let obj = { silinenkanal: req.body.silinenkanal, silinenrol: req.body.silinenrol }; if (obj.silinenkanal !== undefined) { const entries = await client.guilds.cache.get(config.guildID).fetchAuditLogs({ type: 'CHANNEL_DELETE' }).then((audit) => audit.entries); const entry = entries.filter((entry) => entry.target.id === obj.silinenkanal); entry.map(async (ent) => { const { target } = ent; if (target.id == obj.silinenkanal) { let PermissionsArray = []; target.permission_overwrites.map(async perm => { PermissionsArray.push({ id: perm.id, allow: new Permissions(perm.allow).toArray(), deny: new Permissions(perm.deny).toArray() }); }); let channel = await client.guilds.cache.get(config.guildID).channels.create(target.name, { type: target.type,  topic: target.topic || null,  nsfw: target.nsfw,  parent: target.parent, position: target.position + 1,  rateLimitPerUser: target.rate_limit_per_user, permissionOverwrites: PermissionsArray }); } }) } else { console.log("[WEB PANEL] Site ayarlarında kurulacak kanal seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.silinenrol !== undefined) { const aris = await ariscik.findOne({ guildID: config.guildID }); await roleBackup.findOne({ roleID: obj.silinenrol }, async (err, data) => { if (!data) return client.channels.cache.get(aris.guardLog).send(`**UYARI:** Sitede belirtilen rol ID'sine ait veri bulunamadı!`); const newRole = await client.guilds.cache.get(config.guildID).roles.create({ name: data.name, color: data.color, hoist: data.hoist, permissions: data.permissions, position: data.position, mentionable: data.mentionable, reason: "Rol Silindiği İçin Tekrar Oluşturuldu!" }); rolKur(obj.silinenrol, newRole); }) } else { console.log("[WEB PANEL] Site ayarlarında kurulacak rol seçilmediği için herhangi bir işlem yapmıyorum!") };  })
app.post('/registerkaydet', async (req, res) => { res.render('pages/register', { user: req.user, bot: client }); let obj = { registeryetkili: req.body.registeryetkili, kayitsiz: req.body.kayitsizrol, teyitkanal: req.body.teyitkanali, invitelog: req.body.invitelog, erkekrolleri: req.body.erkekrolleri, kadinrolleri: req.body.kadinrolleri }; if (obj.registeryetkili !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { registerHammer: obj.registeryetkili } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında register yetkili rolü seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.teyitkanal !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { welcomeChannel: obj.teyitkanal } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında teyit kanalı seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.invitelog !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { inviteLog: obj.invitelog } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında invite kanalı seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.erkekrolleri !== undefined) { let ErkekRollerFiltered = []; typeof obj.erkekrolleri == 'string' ? ErkekRollerFiltered.push(obj.erkekrolleri) : obj.erkekrolleri.map(a => ErkekRollerFiltered.push(a)); await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { manRoles: ErkekRollerFiltered } }, { upsert: true }).exec();} else { console.log("[WEB PANEL] Site ayarlarında erkek rolleri seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.kadinrolleri !== undefined) { let KadinRollerFiltered = []; typeof obj.kadinrolleri == 'string' ? KadinRollerFiltered.push(obj.kadinroller) : obj.kadinroller.map(a => KadinRollerFiltered.push(a)); await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { womanRoles: KadinRollerFiltered } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında kadın rolleri seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.kayitsiz !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { unregisterRole: obj.kayitsiz } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında unregister rol seçilmediği için herhangi bir işlem yapmıyorum!") };  })
app.post('/kanalkontrol', async (req, res) => { const data = await ariscik.findOne({ guildID: config.guildID }); const changed = []; for (const member of data.WhiteListMembers) { const user = await client.users.fetch(member); changed.push({ id: member, name: user.tag, }); } data.WhiteListMembers = changed; const yetkiPermleri = ["8", "268435456", "16", "536870912", "4", "2", "134217728", "1073741824", "536870912"]; const caudit = await client.guilds.cache.get(config.guildID).fetchAuditLogs({ type: 'CHANNEL_DELETE', limit: 30 }).then(a => a.entries); const raudit = await client.guilds.cache.get(config.guildID).fetchAuditLogs({ type: 'ROLE_DELETE', limit: 30 }).then(a => a.entries); res.render('pages/guard', { user: req.user, bot: client, arislesnar: data, yetkiPermleri: yetkiPermleri, caudit: caudit, raudit: raudit }); const guildses = client.guilds.cache.get(config.guildID); const text = await TextChannels.find(); const deletedTextChannels = text.filter(r => !guildses.channels.cache.has(r.channelID)); deletedTextChannels.forEach(async (deletedChannels) => { const newChannel = await guildses.channels.create(deletedChannels.name, { type: deletedChannels.type, topic: deletedChannels.topic, bitrate: deletedChannels.bitrate, nsfw: deletedChannels.nsfw, parent: deletedChannels.parent, position: deletedChannels.position + 1, permissionOverwrites: deletedChannels.overwrites, rateLimitPerUser: deletedChannels.rateLimitPerUser, userLimit: deletedChannels.userLimit }); if (newChannel) newChannel.setParent(deletedChannels.parentID, { lockPermissions: false }); if (newChannel.type === 'GUILD_CATEGORY') { for (const parentChannel of deletedTextChannels.filter((channel) => channel.parent === deletedChannels.channelID)) { parentChannel.parent = newChannel.id; } await TextChannels.updateMany({ parentID: deletedChannels.channelID }, { parentID: newChannel.id }); const categorys = text.filter((channel) => channel.parentID === deletedChannels.channelID); for (const parentChannel of categorys) { const channel = guildses.channels.cache.get(parentChannel.channelID); if (channel) await channel.setParent(newChannel.id, { lockPermissions: false }); } } }) })
app.post('/rolkontrol', async (req, res) => { const data = await ariscik.findOne({ guildID: config.guildID }); const changed = []; for (const member of data.WhiteListMembers) { const user = await client.users.fetch(member); changed.push({ id: member, name: user.tag, }); } data.WhiteListMembers = changed; const yetkiPermleri = ["8", "268435456", "16", "536870912", "4", "2", "134217728", "1073741824", "536870912"]; const caudit = await client.guilds.cache.get(config.guildID).fetchAuditLogs({ type: 'CHANNEL_DELETE', limit: 30 }).then(a => a.entries); const raudit = await client.guilds.cache.get(config.guildID).fetchAuditLogs({ type: 'ROLE_DELETE', limit: 30 }).then(a => a.entries); res.render('pages/guard', { user: req.user, bot: client, arislesnar: data, yetkiPermleri: yetkiPermleri, caudit: caudit, raudit: raudit }); const roles = await roleBackup.find(); const guildses = client.guilds.cache.get(config.guildID); const deletedRoles = roles.filter(r => !guildses.roles.cache.has(r.roleID)); deletedRoles.forEach(async (deletedRole) => { const newRole = await guildses.roles.create({ name: deletedRole.name, color: deletedRole.color, hoist: deletedRole.hoist, position: deletedRole.position, permissions: deletedRole.permissions, mentionable: deletedRole.mentionable, }); const Bots = global.bots.filter(e => !e.idle); let aris = await ariscik.findOne({ guildID: config.guildID }); roleBackup.findOne({ roleID: deletedRole.roleID }, async (err, data) => { const channelPerm = data.channelOverwrites.filter(e => client.guilds.cache.get(config.guildID).channels.cache.get(e.id)); for await (const perm of channelPerm) { const bott = Bots[1]; const guild2 = bott.guilds.cache.get(config.guildID); let kanal = guild2.channels.cache.get(perm.id); if (!kanal) return; let newPerm = {}; perm.allow.forEach(p => { newPerm[p] = true; }); perm.deny.forEach(p => { newPerm[p] = false; }); kanal.permissionOverwrites.create(newRole, newPerm).catch(error => console.log(error)); } for (let index = 0; index < Bots.length; index++) { const bot = Bots[index]; const guild = bot.guilds.cache.get(config.guildID); const members = deletedRoles.map((r) => r.members).reduce((a, b) => a.concat(b)); if (members.length <= 0) { console.log(`[${deletedRole.roleID}] Olayında kayıtlı üye olmadığından veya rol üyelerine dağıtıldığından dolayı rol dağıtımı gerçekleştirmedim.`); if (aris.guardLog) client.channels.cache.get(aris.guardLog).send(`[${deletedRole.roleID}] rolünün datasında üye verisi bulunamadığı veya üyelere zaten dağıtıldığı için dağıtım işlemi yapılamadı!`); break; } members.forEach(async (id, i) => { const roles = deletedRoles.filter((role) => role.members.includes(id)).map((role) => role.id); const member = guild.members.cache.get(id); if (member) await member.roles.add(roles.filter((role) => !member.roles.cache.has(role))); }) ;for await (const user of members) { const member = guild.members.cache.get(user); member.roles.add(newRole.id) } } }) }) })
app.post('/backupal', async (req, res) => { const data = await ariscik.findOne({ guildID: config.guildID }); const changed = []; for (const member of data.WhiteListMembers) { const user = await client.users.fetch(member); changed.push({ id: member, name: user.tag, }); } data.WhiteListMembers = changed; const yetkiPermleri = ["8", "268435456", "16", "536870912", "4", "2", "134217728", "1073741824", "536870912"]; const caudit = await client.guilds.cache.get(config.guildID).fetchAuditLogs({ type: 'CHANNEL_DELETE', limit: 30 }).then(a => a.entries); const raudit = await client.guilds.cache.get(config.guildID).fetchAuditLogs({ type: 'ROLE_DELETE', limit: 30 }).then(a => a.entries); res.render('pages/guard', { user: req.user, bot: client, arislesnar: data, yetkiPermleri: yetkiPermleri, caudit: caudit, raudit: raudit }); await roleBackup.deleteMany(); const aris = await ariscik.findOne({ guildID: config.guildID }); const guild = client.guilds.cache.get(config.guildID); const roles = guild.roles.cache.filter(r => r.name !== "@everyone").array(); for (let index = 0; index < roles.length; index++) { const role = roles[index]; let Overwrites = []; await guild.channels.cache.filter(channel => channel.permissionOverwrites.cache.has(role.id)).forEach(channel => { let channelPerm = channel.permissionOverwrites.cache.get(role.id); let perms = { id: channel.id, allow: channelPerm.allow.toArray(), deny: channelPerm.deny.toArray() }; Overwrites.push(perms); }); await roleBackup.findOne({ roleID: role.id }, async (err, data) => { if (!data) { const newData = new roleBackup({ roleID: role.id, name: role.name, color: role.hexColor, hoist: role.hoist, position: role.position, permissions: role.permissions.bitfield, mentionable: role.mentionable, time: Date.now(), members: role.members.map(m => m.id), channelOverwrites: Overwrites }); newData.save(); } else { data.name = role.name; data.color = role.hexColor; data.hoist = role.hoist; data.position = role.position; data.permissions = role.permissions.bitfield; data.mentionable = role.mentionable; data.time = Date.now(); data.members = role.members.map(m => m.id); data.channelOverwrites = Overwrites; data.save(); }; }); } await roleBackup.find({}, (err, roles) => { roles.filter(r => !guild.roles.cache.has(r.roleID) && Date.now() - r.time > 1000 * 60 * 60 * 24 * 3).forEach(r => { r.remove(); }); }); await console.log(`[GUARD] Rol verileri yedeklendi!`); if (aris.guardLog) await client.channels.cache.get(aris.guardLog).send(`${emojis.onay} [GUARD] \`Rol\` **verileri yedeklendi!**`); if (aris.guardLog) await client.channels.cache.get(aris.guardLog).send(`${emojis.onay} [GUARD] \`Kanal\` **verileri yedeklendi!**`); await TextChannels.deleteMany(); if (guild) {const channels = guild.channels.cache.array();for (let index = 0; index < channels.length; index++) {const channel = channels[index];let ChannelPermissions = [];channel.permissionOverwrites.cache.forEach(perm => {ChannelPermissions.push({ id: perm.id, type: perm.type, allow: "" + perm.allow, deny: "" + perm.deny })});if ((channel.type === 'GUILD_TEXT') || (channel.type === 'GUILD_NEWS')) {await TextChannels.findOne({ channelID: channel.id }, async (err, kanalYedek) => {if (!kanalYedek) {const newData = new TextChannels({channelID: channel.id,name: channel.name,nsfw: channel.nsfw,type: channel.type,parentID: channel.parentId,position: channel.position,rateLimit: channel.rateLimitPerUser,overwrites: ChannelPermissions,});await newData.save();} else {kanalYedek.name = channel.name,kanalYedek.nsfw = channel.nsfw,kanalYedek.parentID = channel.parentId,kanalYedek.position = channel.position,kanalYedek.rateLimit = channel.rateLimitPerUser, kanalYedek.overwrites = ChannelPermissions; kanalYedek.save(); }; }); }; if (channel.type === 'GUILD_VOICE') { await TextChannels.findOne({ channelID: channel.id }, async (err, kanalYedek) => { if (!kanalYedek) { const newData = new TextChannels({ channelID: channel.id, name: channel.name, bitrate: channel.bitrate, parentID: channel.parentId, position: channel.position, overwrites: ChannelPermissions, }); await newData.save(); } else { kanalYedek.name = channel.name, kanalYedek.bitrate = channel.bitrate, kanalYedek.parentID = channel.parentId, kanalYedek.position = channel.position, kanalYedek.overwrites = ChannelPermissions; kanalYedek.save(); }; }); } if (channel.type === 'GUILD_CATEGORY') { await TextChannels.findOne({ channelID: channel.id }, async (err, kanalYedek) => { if (!kanalYedek) { const newData = new TextChannels({ channelID: channel.id, name: channel.name, position: channel.position, overwrites: ChannelPermissions, }); await newData.save(); } else { kanalYedek.name = channel.name, kanalYedek.position = channel.position, kanalYedek.overwrites = ChannelPermissions; kanalYedek.save(); }; }); } } await console.log(`[GUARD] Kanal verileri yedeklendi!`); } })
app.post('/rolalmakaydet', async (req, res) => { res.render('pages/role', { user: req.user, bot: client, arislesnar: await ariscik.findOne({ guildID: config.guildID }) }); let obj = { etkinlikrol: req.body.etkinlikrol, cekilisrol: req.body.cekilisrol, eckanal: req.body.eckanal, }; if (obj.etkinlikrol !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { etkinlikRole: obj.etkinlikrol } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında etkinlik rolü seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.cekilisrol !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { cekilisRole: obj.cekilisrol } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında çekiliş rolü seçilmediği için herhangi bir işlem yapmıyorum!") }; if (obj.eckanal !== undefined) { await ariscik.findOneAndUpdate({ guildID: config.guildID }, { $set: { ecChannel: obj.eckanal } }, { upsert: true }).exec(); } else { console.log("[WEB PANEL] Site ayarlarında rol alma kanal seçilmediği için herhangi bir işlem yapmıyorum!") };  })
app.post('/menuolustur', async (req, res) => { res.render('pages/menu', { user: req.user, bot: client, arislesnar: await Custom.find({}) }); let obj = { menuisim: req.body.menuisim, menuaciklama: req.body.menuaciklama, menuroller: req.body.menuroller }; if (obj.menuisim !== undefined && obj.menuaciklama !== undefined && obj.menuroller !== undefined) { let rollerFiltered = []; typeof obj.menuroller == 'string' ? rollerFiltered.push(obj.menuroller) : obj.menuroller.map(a => rollerFiltered.push(a)); let secretKodu = secretOluştur(10); await Custom.updateOne({Name: obj.menuisim}, { $set: { "Text": obj.menuaciklama, "Roles": rollerFiltered, "Date": Date.now(), Secret: secretKodu, "Author": req.user.id,  }}, {upsert: true}) } else { console.log("[WEB PANEL] Menü oluşturma sisteminde açıklama/isim/rol belirtilmediği için işlem iptal edildi!") } })
app.post('/menukanal', async (req, res) => { res.render('pages/menu', { user: req.user, bot: client, arislesnar: await Custom.find({}) }); let obj = { menudata: req.body.menudata, menukanal: req.body.menukanal }; if (obj.menudata !== undefined && obj.menukanal !== undefined) { let kurulcak = await Custom.findOne({ Name: obj.menudata }); let kurulcakguild = client.guilds.cache.get(config.guildID); if(kurulcak) { let Opt = []; kurulcak.Roles.forEach(r => { Opt.push({label: kurulcakguild.roles.cache.get(r) ? kurulcakguild.roles.cache.get(r).name : "@Rol Bulunamadı!", emoji: { "id": emojis.star.id}, value: r}) }); let listMenu = new Discord.MessageActionRow().addComponents( new Discord.MessageSelectMenu().setCustomId(kurulcak.Secret).setPlaceholder(`${kurulcak.Name}`).setOptions([Opt, {"label": "Rol İstemiyorum", "value": "rolsil", "emoji": { "id": "922058306263072860", "name": "monarch_trash" }}])); client.channels.cache.get(obj.menukanal).send({content: `${kurulcak.Text}`, components: [listMenu]}).then(async (oluşturuldu) => { var filter = i => i.customId == kurulcak.Secret; let collector = oluşturuldu.createMessageComponentCollector({filter: filter});collector.on('collect', async (i) => {const member = await client.guilds.cache.get(config.guildID).members.fetch(i.user.id); if (!member) return;let Data = await Custom.findOne({Secret: kurulcak.Secret}); let customMap = new Map(); Data.Roles.forEach(r => customMap.set(r, r)); let roles = Data.Roles; var role = []; for (let index = 0; index < i.values.length; index++) {let ids = i.values[index]; let den = customMap.get(ids); role.push(den)}if (i.values[0] === "rolsil") {await member.roles.remove(roles)} else {if (!i.values.length) {await member.roles.remove(roles).catch(err => {})} else {await member.roles.remove(roles).catch(err => {});await member.roles.add(role).catch(err => {})}}; i.reply({ content: "Rolleriniz güncellendi.", ephemeral: true })})})} } else { console.log("[WEB PANEL] Menü kurma sisteminde menü veya kanal deçilmediği için işlem iptal edildi!")} })

app.listen(3000, () => console.log(`[WEB PANEL] 3000 üzerinden başlatıldı!`));


function secretOluştur(length) { var result           = ''; var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; var charactersLength = characters.length; for ( var i = 0; i < length; i++ ) { result += characters.charAt(Math.floor(Math.random() * charactersLength)); } return result; }