const mongoose = require('mongoose');

const ariscik = mongoose.model("ariscik", mongoose.Schema({ guildID: String, isimsembol: String, isimsemboliki: String, tags: Array, tagLog: String, dailyMissionLog: String, messageLog: String, voiceLog: String, yasakTagLog: String, denetimLog: String, commandLog: String, banLog: String, muteLog: String, jailLog: String, guardLog: String, ecChannel: String, kullaniciPanelChannel: String, botVoiceChannel: String, genelChat: String, welcomeChannel: String, inviteLog: String, rolLog: String, commandsChannel: { type: Array, default: [] }, banHammer: String, jailHammer: String, muteHammer: String, vmuteHammer: String, clownHammer: String, moveHammer: String, registerHammer: String, unregisterRole: String, manRoles: { type: Array, default: [] }, womanRoles: { type: Array, default: [] }, yonetimRoles: { type: Array, default: [] }, tagRol: String, mutedRole: String, vmutedRole: String, jailedRole: String, boosterRole: String, etkinlikRole: String, cekilisRole: String, vipRole: String, bannedTags: Array, bannedTagRole: String, bannedTagLog: String, publicParents: Array, cBronz: String, cGumus: String, cAltin: String, cElmas: String, vBronz: String, vGumus: String, vAltin: String, vElmas: String, levelLog: String, urlGuard: { type: Boolean, default: true }, serverGuard: { type: Boolean, default: true }, roleGuard: { type: Boolean, default: true }, tacGuard: { type: Boolean, default: false }, channelGuard: { type: Boolean, default: true }, bannedTag: { type: Boolean, default: false }, tagliAlim: { type: Boolean, default: false }, WhiteListMembers: { type: Array, default: [] }, coinSystem: { type: Boolean, default: false }, dolarSystem: { type: Boolean, default: false }, urunler: Array }))
const Users = mongoose.model("Users", mongoose.Schema({ userID: String, TeyitNo: Number, Teyitler: { type: Array, default: [] }, Taggeds: { type: Array, default: [] }, Registrant: Object, Inviter: Object, AfkStatus: Object, Names: { type: Array, default: [] }, kayit: { type: Array, default: [] }, Teyitci: { type: Array, default: [] } }))
const roleBackup = mongoose.model("Roles", mongoose.Schema({ roleID: String, name: String, color: String, hoist: Boolean, position: Number, permissions: String, mentionable: Boolean, time: Number, members: Array, channelOverwrites: Array }))
const CategoryChannels = mongoose.model("CategoryChannels", mongoose.Schema({ channelID: String, type: String, name: String, position: Number, overwrites: Array, }))
const TextChannels = mongoose.model("TextChannels", mongoose.Schema({ channelID: String, type: String, name: String, nsfw: Boolean, parentID: String, position: Number, rateLimit: Number, overwrites: Array, bitrate: Number, }))
const VoiceChannels = mongoose.model("VoiceChannels", mongoose.Schema({ channelID: String, type: String, name: String, bitrate: Number, parentID: String, position: Number, overwrites: Array, }))
const channelBackup = mongoose.model("Channels", mongoose.Schema({ channelID: String, type: String, name: String, bitrate: Number, parentID: String, position: Number, overwrites: Array, rateLimit: Number, nsfw: Boolean }))
const Inviter = mongoose.model("Inviters", mongoose.Schema({ guildID: String, userID: String, total: { type: Number, default: 0, min: 0 }, regular: { type: Number, default: 0, min: 0 }, bonus: { type: Number, default: 0, min: 0 }, leave: { type: Number, default: 0, min: 0 }, fake: { type: Number, default: 0, min: 0 }, }))
const Penalties = mongoose.model("Penalties", mongoose.Schema({ id: { type: Number, default: 0 }, guildID: String, userID: String, Ceza: String, Aktif: { type: Boolean, default: true }, Yetkili: { type: String, default: "" }, Sebep: { type: String, default: "" }, Zaman: { type: Number, default: Date.now() }, Sure: { type: String, default: "" }, kalkmazamani: Number, cezapuan: { type: Number, default: 0 }, cezasayi: { type: Array, default: [] } }));
const Snipes = mongoose.model("snipes", mongoose.Schema({ guildID: String, channelID: String, userID: String, messageContent: String, image: String, createdDate: { type: Number, default: Date.now() }, deletedDate: { type: Number, default: Date.now() } }));
const RoleData = mongoose.model("RoleData", mongoose.Schema({ guildID: String, user: String, rollers: { type: Array, default: [] }, mod: String, }));
const tPerms = mongoose.model("tperms", mongoose.Schema({ guildID: String, komutAd: String, verilcekRol: Array, YetkiliRol: Array, }));
const messageGuild = mongoose.model("messageGuild", mongoose.Schema({ guildID: String, topStat: { type: Number, default: 0 }, dailyStat: { type: Number, default: 0 }, weeklyStat: { type: Number, default: 0 }, }));
const messageGuildChannel = mongoose.model("messageGuildChannel", mongoose.Schema({ guildID: String, channelID: String, channelData: { type: Number, default: 0 }, }));
const messageUser = mongoose.model("messageUser", mongoose.Schema({ guildID: String, userID: String, topStat: { type: Number, default: 0 }, dailyStat: { type: Number, default: 0 }, weeklyStat: { type: Number, default: 0 }, }));
const messageUserChannel = mongoose.model("messageUserChannel", mongoose.Schema({ guildID: String, userID: String, channelID: String, channelData: { type: Number, default: 0 }, }));
const voiceGuild = mongoose.model("voiceGuild", mongoose.Schema({ guildID: String, topStat: { type: Number, default: 0 }, dailyStat: { type: Number, default: 0 }, weeklyStat: { type: Number, default: 0 }, }));
const voiceGuildChannel = mongoose.model("voiceGuildChannel", mongoose.Schema({ guildID: String, channelID: String, channelData: { type: Number, default: 0 }, }));
const voiceJoinedAt = mongoose.model("voiceJoinedAt", mongoose.Schema({ userID: String, date: Number }));
const voiceUser = mongoose.model("voiceUser", mongoose.Schema({ guildID: String, userID: String, topStat: { type: Number, default: 0 }, dailyStat: { type: Number, default: 0 }, weeklyStat: { type: Number, default: 0 }, }));
const voiceUserChannel = mongoose.model("voiceUserChannel", mongoose.Schema({ guildID: String, userID: String, channelID: String, channelData: { type: Number, default: 0 }, }));
const voiceUserParent = mongoose.model("voiceUserParent", mongoose.Schema({ guildID: String, userID: String, parentID: String, parentData: { type: Number, default: 0 }, }))
const talentPerms = mongoose.model("talentPerms", mongoose.Schema({ guildID: String, komutAd: String, verilcekRol: Array, YetkiliRol: Array }))
const permis = mongoose.model("permis", mongoose.Schema({ guildID: String, roller: Array }))
const preUser = mongoose.model("preUser", mongoose.Schema({ guildID: String, userID: String, roles: Array }))
const coin = mongoose.model("coin", mongoose.Schema({ guildID: String, userID: String, coin: Number, dolar: Number, kisi: Number, advancedRanks: { type: Array, default: [] } }))
const Custom = mongoose.model("Custom", mongoose.Schema({ Name: String, Roles: Array, Text: String, Secret: String, Date: Date, Author: String }))
const tasks = mongoose.model("tasks", mongoose.Schema({ guildID: { type: String, default: "" }, userID: { type: String, default: "" }, id: { type: Number, default: 0 }, type: { type: String, default: "" }, count: { type: Number, default: 0 }, prizeCount: { type: Number, default: 0 }, active: { type: Boolean, default: true }, finishDate: { type: Number, default: Date.now() }, date: { type: Number, default: Date.now() }, completed: { type: Boolean, default: false }, completedCount: { type: Number, default: 0 }, channels: { type: Array, default: null }, message: { type: String, default: "" } }))
const hero = mongoose.model("hero", mongoose.Schema({ guildID: { type: String, default: "" }, userID: { type: String, default: "" }, power: Number, NumberHero: Number, ACoin: Number, JuanPablo: Boolean, JoseGacha: Boolean, Pacho: Boolean, Posion: Boolean, Quica: Boolean, Gaviria: Boolean, Pablo: Boolean }))
const market = mongoose.model("market", mongoose.Schema({ guildID: String, urunler: Array }))
const coins = mongoose.model("coins", mongoose.Schema({ userID: String, Coin: {type: Number, default: 0}, GunlukCoin: {type: Number, default: 0}, Arkada≈ülar: { type: Object }, Transferler: { type: Object }, Envanter: {type: Object } }))
const cekilis = mongoose.model("cekilis", mongoose.Schema({ messageID: String, katilan: Array, time: String, }))

module.exports = { cekilis, coins, market, hero, channelBackup, ariscik, Users, CategoryChannels, roleBackup, TextChannels, VoiceChannels, Inviter, Penalties, Snipes, RoleData, tPerms, messageGuild, messageGuildChannel, messageUser, messageUserChannel, voiceGuild, voiceGuildChannel, voiceJoinedAt, voiceUser, voiceUserChannel, voiceUserParent, talentPerms, permis, preUser, Custom, tasks, coin }